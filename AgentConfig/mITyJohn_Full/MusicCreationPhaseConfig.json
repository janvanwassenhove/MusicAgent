{

  "Conceptualization": {
    "type" : "chat",
    "assistant_role_name": "Composer",
    "user_role_name": "Artist",
    "phase_prompt": [
      "Come up with a concept for a song based on this description: {song_description}.",
      "Provide a response in JSON format with separate fields for theme, melody, and rhythm. The response should be formatted as a JSON-compatible string, ready to be parsed. ",
      "A theme could be an emotion, a story, an event, or any specific idea.",
      "The melody might  include the mood of the melody (e.g., uplifting, melancholic), specific musical influences, or even instruments you'd like it to be associated with.",
      "Detail the kind of rhythm you want for the song. This could include the tempo (e.g., fast-paced, slow and steady), the style of rhythm (e.g., jazzy, syncopated), or specific percussion instruments.",
      "For example, \"The rhythm should be lively and upbeat, with a moderate tempo, using hand drums and tambourines.\""
    ],
    "input": {
      "song_description" : "song_description"
    },
    "outcome": {
      "theme": "theme",
      "melody": "melody",
      "rhythm": "rhythm"
    }
  },
  "Songwriting": {
    "type" : "chat",
    "assistant_role_name": "Songwriter",
    "user_role_name": "Composer",
    "phase_prompt": [
      "Write me lyrics for the song with following ideas: ",
      "Theme of the song: {theme}. ",
      "Melody: {melody}. ",
      "Rhythm: {rhythm}. ",
      "Lyrics should not be single words, but wel elaborated, taking the structure of the song into account.",
      "Provide a response in JSON format with separate fields for lyrics and structure. The response should be formatted as a JSON-compatible string, ready to be parsed. ",
      "The structure of the song, can be defined like e.g. Intro - Verse - Chorus - Verse - Chorus - Solo - Bridge - Chorus - Outro.",
      "For defining the structure, the choice is free and should take into account the melody & rhythm.",
      "The response should be formatted as a JSON-compatible string, ready to be parsed. ",
      "Please provide the response in strict JSON format without any additional text, explanations, or comments. The JSON should include fields for \"lyrics\" and \"structure\", with each section properly formatted as a JSON object.\n",
      "Here is an example of the expected JSON format:\n{\n  \"lyrics\": {\n    \"Intro\": \"Your lyrics here...\",\n    \"Verse 1\": \"Your lyrics here...\",\n    \"Chorus\": \"Your lyrics here...\",\n    // Other sections\n  },\n  \"structure\": \"Intro - Verse 1 - Chorus - Verse 2 - Chorus - Solo - Bridge - Chorus - Outro\"\n}\nPlease ensure your response follows this structure.\n"
    ],
    "input": {
      "theme": "theme",
      "melody": "melody",
      "rhythm": "rhythm"
    },
    "outcome": {
      "lyrics": "lyrics",
      "structure": "structure"
    }
  },
  "Segmentation": {
    "type" : "chat",
    "assistant_role_name": "Arranger",
    "user_role_name": "Composer",
    "phase_prompt": [
      "We have following lyrics of my new song: {lyrics} ",
      "The melody is defined as: {melody}. ",
      "Rhythm: {rhythm}. ",
      "The structure of the song, is defined as {structure}.",
      "We expect the song to have a total duration of {total_duration} seconds.",
      "Given this information determine the duration of the different segments in the songs. Segments are based on the song structure. ",
      "Provide a response in JSON format with separate field for segments. The json fields segments holds the information on the segements.",
      "The response should be formatted as a JSON-compatible string, ready to be parsed. ",
      "Please provide the response in strict JSON format without any additional text, explanations, or comments. The JSON should include a field for \"segments\", with each section properly formatted as a JSON object.\n",
      "Here is an example of the expected JSON format:\n{\n  \"segments\": \"Intro - Verse 1 - Chorus - Verse 2 - Chorus - Solo - Bridge - Chorus - Outro\"\n}\nPlease ensure your response follows this structure.\n"
    ],
    "input": {
      "lyrics": "lyrics",
      "melody": "melody",
      "rhythm": "rhythm",
      "structure": "structure",
      "total_duration": "total_duration"
    },
    "outcome": {
      "segments": "segments"
    }
  },
  "Arrangements": {
    "type" : "chat",
    "assistant_role_name": "Arranger",
    "user_role_name": "Composer",
    "phase_prompt": [
      "We have following lyrics of my new song {lyrics}, the theme of the song is {theme}. ",
      "The melody is defined as: {melody}. ",
      "Rhythm is defined as: {rhythm}. ",
      "The structure of the song is defined as {structure}.",
      "The song has a total duration of {total_duration} seconds, divided in the following segments {segments} (where numbers represent the duration of the individual segments).",
      "Given this information define the instruments that will be used and how they will be played during the complete song and the individual segments. ",
      "These will be defined as arrangements. To variate, you can use chord progessions like: power chord progression, jazz or blues chord progression.",
      "Other variations can be drops like: EDM drops, half-time or trap drops. Try to vary as well with drum breaks, breakdowns and guitar breaks.",
      "Other techniques you can use are stabs, arpeggios, dynamic shifts, polyrhythms or counterpoint melodies",
      "Try to arrange multiple instruments to get a fuller sound across the song.",
      "Provide a response in JSON format with a separate field for arrangements. The response should be formatted as a JSON-compatible string, ready to be parsed. ",
      "The response should be formatted as a JSON-compatible string, ready to be parsed. ",
      "Please provide the response in strict JSON format without any additional text, explanations, or comments. The JSON should include fields for \"arrangements\", with each section properly formatted as a JSON object.\n"
    ],
    "input": {
      "type" : "chat",
      "lyrics": "lyrics",
      "theme": "theme",
      "melody": "melody",
      "rhythm": "rhythm",
      "structure": "structure",
      "total_duration": "total_duration",
      "segments": "segments"
    },
    "outcome": {
      "arrangements": "arrangements"
    }
  },
  "Sampling": {
    "type" : "local_chat",
    "assistant_role_name": "Arranger",
    "user_role_name": "Composer",
    "phase_prompt": [
      "The theme ois {theme}. ",
      "The melody is described as: {melody}. ",
      "Rhythm elements include: {rhythm}. ",
      "The arrangements are: {arrangements}."
    ],
    "input": {
      "type" : "local_chat",
      "theme": "theme",
      "melody": "melody",
      "arrangements": "arrangements"
    },
    "outcome": {
      "samples": "samples"
    }
  },
  "Initial Song Coding": {
    "type" : "chat",
    "assistant_role_name":"Sonic PI coder",
    "user_role_name": "Artist",
    "phase_prompt": [
      "We are developing a song using SONIC PI.",
      "The melody is defined as: {melody}.",
      "Rhythm: {rhythm}.",
      "The structure of the song is defined as: {structure}.",
      "The song has to have a total duration of {total_duration} seconds.",
      "The song is divided into different segments with their own individual timings (in seconds): {segments}.",
      "For the complete song, as for the individual segments, the following arrangements were defined: {arrangements}.",
      "You can use the following additional samples (external to Sonic Pi) that match the mood, progression, and instrumentation described above: {samples}.",
      "**GIVEN THIS INFORMATION, CODE THE SONG USING THE SONIC PI PROGRAMMING LANGUAGE.**",
      "\n**KEY REQUIREMENTS:**",
      "1. **PARALLEL INSTRUMENTATION**: During key segments (e.g., verses, choruses, solos), ensure multiple instruments (e.g., melody, bassline, chords, and drum patterns) are **PLAYED SIMULTANEOUSLY** to create a **FULLER, RICHER SOUND**.",
      "2. **BACKGROUND CONTINUITY**: Ensure background elements like drum patterns, recurring beats, or basslines **RUN CONTINUOUSLY** during segments to support the main melody or chords.",
      "3. **DYNAMIC LAYERING**: During segments such as the **CHORUS**, introduce additional layers (e.g., harmony, effects like reverb or distortion, or more complex rhythms) to enhance the sound.",
      "4. **NO SILENT GAPS**: The song must have a **CONTINUOUS, FLUENT MELODY** with no silent gaps or separate blocks.",
      "5. **AVOID LIVE LOOPS**: Do not use live loops. Instead, use techniques like `in_thread`, `sync`, `sleep`, and timed sequences to manage the flow.",
      "6. **TRANSLATION OF ARRANGEMENTS**: Translate the arrangements within the limitations of Sonic Pi, balancing instruments and effects effectively for each segment.",
      "\nThe composition should feel complete and cohesive, with a consistent tempo and flow.",
      "Provide a response in JSON format with a separate field for 'sonicpi_code'.",
      "The 'sonicpi_code' field should hold the complete Sonic Pi code (written in Ruby).",
      "The response should be formatted as a JSON-compatible string, ready to be parsed. Format the response like this: {\"sonicpi_code\": \"<complete code here>\"}.",
      "**DO NOT** include any additional text, explanations, or comments outside of the JSON format.",
      "**ENSURE** the generated Sonic Pi code adheres strictly to the provided total duration, rhythm, and structure constraints."
    ],
    "input": {
      "theme": "theme",
      "melody": "melody",
      "rhythm": "rhythm",
      "structure": "structure",
      "total_duration": "total_duration",
      "segments": "segments",
      "arrangements": "arrangements",
      "samples": "samples"
    },
    "outcome": {
      "sonicpi_code": "sonicpi_code"
    },
    "codeValidation" : true
  },
  "Code Review": {
    "type" : "chat",
    "assistant_role_name":"Sonic PI reviewer",
    "user_role_name": "Sonic PI coder",
    "phase_prompt": [
      "We have the following Sonic PI code: {sonicpi_code}.",
      "The initial requirement was to code a song using the Sonic PI programming language.",
      "The following requirements were provided for the code:",
      "1) **Melody**: {melody};",
      "2) **Rhythm**: {rhythm};",
      "3) **Song structure**: {structure};",
      "4) **Total duration**: {total_duration} seconds;",
      "5) **Segments**: The song is divided into different segments with their own individual timings (in seconds): {segments};",
      "6) **Arrangements**: For the complete song and its individual segments, the following arrangements were defined: {arrangements};",
      "7) **Additional Samples**: You can use the following additional samples (external to Sonic Pi) that match the mood, progression, and instrumentation described above: {samples}.",
      "Review the code against the following criteria:",
      "1) **Sonic Pi Code Validity**: Verify that the script uses correct Sonic Pi code syntax and is free of errors.",
      "2) **Implementation Completeness**: Ensure all methods and functions are fully implemented. Check for placeholder phrases like \"# Apply\", \"# Add code here\", \"# Arrangement goes here\", or similar comments that indicate incomplete code.",
      "3) **Duration Compliance**: Confirm that the total duration of the song is approximately {total_duration} seconds, as specified.",
      "4) **Bug-Free**: Ensure there are no potential bugs in the code that would prevent it from running as intended.",
      "5) **Logic Validation**: Beyond syntax, evaluate the logic of the code. Verify that it meets the requirements without losing any features, such as playing multiple instruments in parallel or adhering to the provided arrangements and structure.",
      "6) **Placeholder Detection**: Check for patterns like \"# Add code\" or similar placeholders that indicate incomplete code. If found, note that these sections must be implemented to make the song functional.",
      "Provide a response in **JSON format** with a single field for \"review\". The review should:",
      "1) Provide clear and actionable instructions for correcting any issues found in the code.",
      "2) If no corrections are needed, return the review field as: \"no further code changes are required\".",
      "3) Be formatted as a JSON-compatible string, ready to be parsed. The format should be as follows: {\"review\": \"<complete review here>\"}.",
      "DO NOT include any additional text, explanations, or comments outside of the JSON format.",
      "Ensure the JSON strictly includes only the \"review\" field, properly formatted and containing either the necessary corrections or the statement \"no further code changes are required\"."
    ],
    "input": {
      "theme": "theme",
      "melody": "melody",
      "rhythm": "rhythm",
      "structure": "structure",
      "total_duration": "total_duration",
      "segments": "segments",
      "arrangements": "arrangements",
      "samples": "samples",
      "sonicpi_code": "sonicpi_code"
    },
    "outcome": {
      "review": "review"
    }
  },
  "Human Review" : {
    "type" : "human_chat",
    "assistant_role_name":"Human reviewer",
    "user_role_name": "Artist"
  },
  "Code Modification": {
    "type" : "chat",
    "assistant_role_name":"Sonic PI coder",
    "user_role_name": "Sonic PI reviewer",
    "phase_prompt": [
      "We have the following Sonic PI code: {sonicpi_code}.",
      "The code was reviewed with the following comments: {review}.",
      "The initial requirements were defined as follows:",
      "1) **Melody**: {melody};",
      "2) **Rhythm**: {rhythm};",
      "3) **Song structure**: {structure};",
      "4) **Total duration**: {total_duration} seconds;",
      "5) **Segments**: The song is divided into different segments with their own individual timings (in seconds): {segments};",
      "6) **Arrangements**: For the complete song, as well as its individual segments, the following arrangements were defined: {arrangements};",
      "7) **Additional Samples**: You can use the following additional samples (external to Sonic Pi) that match the mood, progression, and instrumentation described above: {samples}.",
      "Modify the code according to the provided review comments.",
      "If the review states \"no further code changes are required\", keep the code unchanged and return the complete code as it is.",
      "Your task is to ensure the final code adheres to the initial requirements and resolves all issues or suggestions mentioned in the review.",
      "Provide a response in **JSON format** with a single field for \"sonicpi_code\". This field must contain the **entire Sonic Pi code** (not just the revisions or parts, but the full code for the entire song written in Ruby).",
      "The response should be formatted as a JSON-compatible string, ready to be parsed. Format it as follows: {\"sonicpi_code\": \"<complete code here>\"}.",
      "Do not include any additional text, explanations, or comments outside of the JSON format.",
      "Ensure the JSON strictly includes only the \"sonicpi_code\" field, properly formatted and containing the final, complete code."
    ],
    "input": {
      "theme": "theme",
      "melody": "melody",
      "rhythm": "rhythm",
      "structure": "structure",
      "total_duration": "total_duration",
      "segments": "segments",
      "arrangements": "arrangements",
      "samples": "samples",
      "sonicpi_code": "sonicpi_code",
      "review": "review"
    },
    "outcome": {
      "sonicpi_code": "sonicpi_code"
    },
    "codeValidation" : true
  },
  "Song mixing": {
    "type" : "chat",
    "assistant_role_name":"Sonic PI Mix Engineer",
    "user_role_name": "Sonic PI coder",
    "phase_prompt": [
      "We have the following Sonic PI code: {sonicpi_code}.",
      "As a MIX engineer, your task is to ensure the song is set up and mixed correctly.",
      "The song must meet the following criteria:",
      "1) **Total Duration**: The song should have a total duration of: {total_duration} seconds.",
      "2) **Segment Timing**: Verify that the song is divided into the defined segments with their own individual timings (in seconds): {segments}.",
      "3) **Arrangements**: Ensure that the arrangements for the complete song and its segments match the provided details: {arrangements}.",
      "4) **Continuous Playback**: Ensure the song plays smoothly, without any gaps between or within segments. Overlap or sustain instruments and effects (e.g., reverb, delay) to create seamless transitions between sections.",
      "5) **Layering**: Verify that multiple instruments (e.g., melody, chords, drum patterns) are layered correctly during segments to create a fuller, richer sound.",
      "6) **Intro and Outro**: Ensure the intro fades in smoothly and the outro fades out seamlessly. Use techniques like gradually increasing or decreasing volume or applying effects (e.g., fade envelopes).",
      "7) **Samples**: Incorporate the additional samples (external to Sonic Pi) that match the mood, progression, and instrumentation described above: {samples}.",
      "If the song does not meet these criteria, validate and correct the Sonic PI code to fix these issues.",
      "Provide a response in **JSON format** with a single field for \"sonicpi_code\". This field must contain the **entire Sonic Pi code** (not just the revisions or parts, but the full code for the entire song written in Ruby).",
      "The response should be formatted as a JSON-compatible string, ready to be parsed. Format it as follows: {\"sonicpi_code\": \"<complete code here>\"}.",
      "DO NOT include any additional text, explanations, or comments outside of the JSON format.",
      "Ensure the JSON strictly includes only the \"sonicpi_code\" field, properly formatted and containing the final, complete code."
    ],
    "input": {
      "total_duration": "total_duration",
      "segments": "segments",
      "arrangements": "arrangements",
      "samples": "samples",
      "sonicpi_code": "sonicpi_code"
    },
    "outcome": {
      "sonicpi_code": "sonicpi_code"
    }
  },
  "Song Track Creation": {
    "type" : "file",
    "assistant_role_name":"Music Publisher",
    "user_role_name": "Artist"
  },
  "Song Recording": {
    "type" : "recording",
    "assistant_role_name":"Music Recording Studio",
    "user_role_name": "Artist"
  },
  "Booklet Creation": {
    "type" : "readme",
    "assistant_role_name":"Music Publisher",
    "user_role_name": "Artist"
  },
  "Cover Art": {
    "type" : "art",
    "assistant_role_name":"Music Publisher",
    "user_role_name": "Artist"
  }
}